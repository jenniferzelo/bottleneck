// Generated by CoffeeScript 2.0.2
(function() {
  var Bottleneck, DLList, Local, MIDDLE_PRIORITY, NUM_PRIORITIES, Sync, parser,
    slice = [].slice;

  NUM_PRIORITIES = 10;

  MIDDLE_PRIORITY = 5;

  parser = require("./parser");

  Local = require("./Local");

  DLList = require("./DLList");

  Sync = require("./Sync");

  Bottleneck = (function() {
    class Bottleneck {
      constructor(options = {}, ...invalid) {
        this.ready = this.ready.bind(this);
        this.chain = this.chain.bind(this);
        this.queued = this.queued.bind(this);
        this.running = this.running.bind(this);
        this.check = this.check.bind(this);
        this.submit = this.submit.bind(this);
        this.schedule = this.schedule.bind(this);
        this.wrap = this.wrap.bind(this);
        this.updateSettings = this.updateSettings.bind(this);
        this.currentReservoir = this.currentReservoir.bind(this);
        this.incrementReservoir = this.incrementReservoir.bind(this);
        this.on = this.on.bind(this);
        this.once = this.once.bind(this);
        this.removeAllListeners = this.removeAllListeners.bind(this);
        this.stopAll = this.stopAll.bind(this);
        if (!((options != null) && typeof options === "object" && invalid.length === 0)) {
          throw new Bottleneck.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-from-v1 if you're upgrading from Bottleneck v1.");
        }
        parser.load(options, this.instanceDefaults, this);
        this._queues = this._makeQueues();
        this._executing = {};
        this._nextIndex = 0;
        this._limiter = null;
        this._events = {};
        this._submitLock = new Sync("submit");
        this._registerLock = new Sync("register");
        this._store = new Local(parser.load(options, this.storeDefaults, {}), this);
      }

      ready() {
        return this._store._ready;
      }

      _addListener(name, status, cb) {
        var base;
        if ((base = this._events)[name] == null) {
          base[name] = [];
        }
        this._events[name].push({cb, status});
        return this;
      }

      _trigger(name, args) {
        console.log(">>>>>>>>>", name, args);
        if (this.rejectOnDrop && name === "dropped") {
          args.forEach(function(job) {
            return job.cb.apply({}, [new Bottleneck.prototype.BottleneckError("This job has been dropped by Bottleneck")]);
          });
        }
        if (this._events[name] == null) {
          return;
        }
        this._events[name] = this._events[name].filter(function(event) {
          return event.status !== "none";
        });
        return setTimeout((() => {
          var ref;
          return (ref = this._events[name]) != null ? ref.forEach(function(event) {
            if (event.status === "none") {
              return;
            }
            if (event.status === "once") {
              event.status = "none";
            }
            return event.cb.apply({}, args);
          }) : void 0;
        }), 0);
      }

      _makeQueues() {
        var i, j, ref, results;
        results = [];
        for (i = j = 1, ref = NUM_PRIORITIES; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
          results.push(new DLList());
        }
        return results;
      }

      chain(_limiter) {
        this._limiter = _limiter;
        return this;
      }

      _sanitizePriority(priority) {
        var sProperty;
        sProperty = ~~priority !== priority ? MIDDLE_PRIORITY : priority;
        if (sProperty < 0) {
          return 0;
        } else if (sProperty > NUM_PRIORITIES - 1) {
          return NUM_PRIORITIES - 1;
        } else {
          return sProperty;
        }
      }

      _find(arr, fn) {
        var ref;
        return (ref = (function() {
          var i, j, len, x;
          for (i = j = 0, len = arr.length; j < len; i = ++j) {
            x = arr[i];
            if (fn(x)) {
              return x;
            }
          }
        })()) != null ? ref : [];
      }

      queued(priority) {
        if (priority != null) {
          return this._queues[priority].length;
        } else {
          return this._queues.reduce((function(a, b) {
            return a + b.length;
          }), 0);
        }
      }

      running() {
        return this._store.__running__();
      }

      _getFirst(arr) {
        return this._find(arr, function(x) {
          return x.length > 0;
        });
      }

      check(weight = 1) {
        return this._store.__check__(weight);
      }

      _run(next, wait) {
        var done, index;
        console.log(`Running ${next.args}`);
        done = false;
        index = this._nextIndex++;
        return this._executing[index] = {
          timeout: setTimeout(() => {
            var completed;
            completed = async(...args) => {
              var ref, running;
              if (!done) {
                done = true;
                delete this._executing[index];
                ({running} = (await this._store.__free__(next.options.weight)));
                this._drainAll();
                if (running === 0 && this.queued() === 0) {
                  this._trigger("idle", []);
                }
                if (!this.interrupt) {
                  return (ref = next.cb) != null ? ref.apply({}, args) : void 0;
                }
              }
            };
            if (this._limiter != null) {
              return this._limiter.submit.apply(this._limiter, Array.prototype.concat(next.task, next.args, completed));
            } else {
              return next.task.apply({}, next.args.concat(completed));
            }
          }, wait),
          job: next
        };
      }

      _drainOne() {
        return this._registerLock.schedule(() => {
          var queue, queued, weight;
          if ((queued = this.queued()) === 0) {
            return Promise.resolve(false);
          }
          if (queued === 1) {
            this._trigger("empty", []);
          }
          queue = this._getFirst(this._queues);
          weight = queue.first().options.weight;
          console.log(`Draining ${(queue.first().args)}`);
          return this._store.__register__(weight).then(({success, wait}) => {
            var next;
            console.log(`Drained ${(queue.first().args)} --`, success);
            if (success) {
              next = queue.shift();
              this._run(next, wait);
            }
            return Promise.resolve(success);
          });
        });
      }

      _drainAll() {
        return this._drainOne().then((success) => {
          if (success) {
            return this._drainAll();
          } else {
            return Promise.resolve(success);
          }
        });
      }

      submit(...args) {
        var cb, j, job, l, options, ref, ref1, task;
        if (typeof args[0] === "function") {
          ref = args, task = ref[0], args = 3 <= ref.length ? slice.call(ref, 1, j = ref.length - 1) : (j = 1, []), cb = ref[j++];
          options = this.jobDefaults;
        } else {
          ref1 = args, options = ref1[0], task = ref1[1], args = 4 <= ref1.length ? slice.call(ref1, 2, l = ref1.length - 1) : (l = 2, []), cb = ref1[l++];
          options = parser.load(options, this.jobDefaults);
        }
        job = {options, task, args, cb};
        options.priority = this._sanitizePriority(options.priority);
        console.log("Submitting", job.args);
        return this._submitLock.schedule(async() => {
          var blocked, e, reachedHWM, shifted, strategy;
          try {
            ({reachedHWM, blocked, strategy} = (await this._store.__submit__(this.queued(), options.weight)));
            console.log(`Submitted ${job.args} --`, reachedHWM, blocked);
          } catch (error) {
            e = error;
            job.cb(e);
            return false;
          }
          if (blocked) {
            this._queues = this._makeQueues();
            this._trigger("dropped", [job]);
            return true;
          } else if (reachedHWM) {
            shifted = strategy === Bottleneck.prototype.strategy.LEAK ? this._getFirst(this._queues.slice(options.priority).reverse()).shift() : strategy === Bottleneck.prototype.strategy.OVERFLOW_PRIORITY ? this._getFirst(this._queues.slice(options.priority + 1).reverse()).shift() : strategy === Bottleneck.prototype.strategy.OVERFLOW ? job : void 0;
            if (shifted != null) {
              this._trigger("dropped", [shifted]);
            }
            if ((shifted == null) || strategy === Bottleneck.prototype.strategy.OVERFLOW) {
              return reachedHWM;
            }
          }
          this._queues[options.priority].push(job);
          await this._drainAll();
          return reachedHWM;
        });
      }

      schedule(...args) {
        var options, task, wrapped;
        if (typeof args[0] === "function") {
          [task, ...args] = args;
          options = this.jobDefaults;
        } else {
          [options, task, ...args] = args;
          options = parser.load(options, this.jobDefaults);
        }
        wrapped = function(...args) {
          var cb, j, ref;
          ref = args, args = 2 <= ref.length ? slice.call(ref, 0, j = ref.length - 1) : (j = 0, []), cb = ref[j++];
          return (task.apply({}, args)).then(function(...args) {
            return cb.apply({}, Array.prototype.concat(null, args));
          }).catch(function(...args) {
            return cb.apply({}, args);
          });
        };
        return new this.Promise((resolve, reject) => {
          var sub;
          sub = this.submit.apply({}, Array.prototype.concat(options, wrapped, args, function(...args) {
            return (args[0] != null ? reject : (args.shift(), resolve)).apply({}, args);
          }));
          return sub.catch(function(err) {
            return console.log(`ERROR while submitting, ${err.message}`);
          });
        });
      }

      wrap(fn) {
        return (...args) => {
          return this.schedule.apply({}, Array.prototype.concat(fn, args));
        };
      }

      async updateSettings(options = {}) {
        await this._store.__updateSettings__(parser.overwrite(options, this.storeDefaults));
        parser.overwrite(options, this.instanceDefaults, this);
        this._drainAll();
        return this;
      }

      currentReservoir() {
        return this._store.__currentReservoir__();
      }

      async incrementReservoir(incr = 0) {
        await this._store.__incrementReservoir__(incr);
        this._drainAll();
        return this;
      }

      on(name, cb) {
        return this._addListener(name, "many", cb);
      }

      once(name, cb) {
        return this._addListener(name, "once", cb);
      }

      removeAllListeners(name = null) {
        if (name != null) {
          delete this._events[name];
        } else {
          this._events = {};
        }
        return this;
      }

      stopAll(interrupt = this.interrupt) {
        var job, k, keys;
        this.interrupt = interrupt;
        keys = Object.keys(this._executing);
        (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = keys.length; j < len; j++) {
            k = keys[j];
            results.push(clearTimeout(this._executing[k].timeout));
          }
          return results;
        }).call(this);
        this._drainOne = function() {};
        this.check = function() {
          return false;
        };
        this.submit = function(...args) {
          var cb, j, ref;
          ref = args, args = 2 <= ref.length ? slice.call(ref, 0, j = ref.length - 1) : (j = 0, []), cb = ref[j++];
          return cb(new Bottleneck.prototype.BottleneckError("This limiter is stopped"));
        };
        this.schedule = function() {
          return this.Promise.reject(new Bottleneck.prototype.BottleneckError("This limiter is stopped"));
        };
        if (this.interrupt) {
          (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = keys.length; j < len; j++) {
              k = keys[j];
              results.push(this._trigger("dropped", [this._executing[k].job]));
            }
            return results;
          }).call(this);
        }
        while (job = this._getFirst(this._queues).shift()) {
          this._trigger("dropped", [job]);
        }
        this._trigger("empty", []);
        if (this.running() === 0) {
          this._trigger("idle", []);
        }
        return this;
      }

    };

    Bottleneck.default = Bottleneck;

    Bottleneck.strategy = Bottleneck.prototype.strategy = {
      LEAK: 1,
      OVERFLOW: 2,
      OVERFLOW_PRIORITY: 4,
      BLOCK: 3
    };

    Bottleneck.BottleneckError = Bottleneck.prototype.BottleneckError = require("./BottleneckError");

    Bottleneck.Cluster = Bottleneck.prototype.Cluster = require("./Cluster");

    Bottleneck.prototype.jobDefaults = {
      priority: MIDDLE_PRIORITY,
      weight: 1,
      id: "<none>"
    };

    Bottleneck.prototype.storeDefaults = {
      maxConcurrent: null,
      minTime: 0,
      highWater: null,
      strategy: Bottleneck.prototype.strategy.LEAK,
      penalty: null,
      reservoir: null
    };

    Bottleneck.prototype.instanceDefaults = {
      rejectOnDrop: true,
      interrupt: false,
      Promise: Promise
    };

    return Bottleneck;

  })();

  module.exports = Bottleneck;

}).call(this);
