// Generated by CoffeeScript 1.8.0
(function() {
  var Cluster,
    __hasProp = {}.hasOwnProperty;

  Cluster = (function() {
    function Cluster(maxNb, minTime, highWater, strategy) {
      var _base;
      this.maxNb = maxNb;
      this.minTime = minTime;
      this.highWater = highWater;
      this.strategy = strategy;
      this.limiters = {};
      this.Bottleneck = require("./Bottleneck");
      if (typeof (_base = setInterval((function(_this) {
        return function() {
          var k, time, v, _ref, _results;
          time = Date.now();
          _ref = _this.limiters;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            if ((v._nextRequest + (60 * 1000 * 5)) < time) {
              _results.push(delete _this.limiters[k]);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this), 60 * 1000)).unref === "function") {
        _base.unref();
      }
    }

    Cluster.prototype.key = function(key) {
      var _ref;
      if (key == null) {
        key = "";
      }
      return (_ref = this.limiters[key]) != null ? _ref : (this.limiters[key] = new this.Bottleneck(this.maxNb, this.minTime, this.highWater, this.strategy));
    };

    Cluster.prototype.all = function(cb) {
      var k, v, _ref, _results;
      _ref = this.limiters;
      _results = [];
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        v = _ref[k];
        _results.push(cb(v));
      }
      return _results;
    };

    Cluster.prototype.keys = function() {
      return Object.keys(this.limiters);
    };

    return Cluster;

  })();

  module.exports = Cluster;

}).call(this);
