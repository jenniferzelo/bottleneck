"use strict";

// Generated by CoffeeScript 2.2.4
(function () {
  var IORedisConnection;

  IORedisConnection = class IORedisConnection {
    constructor(clientOptions, Promise, Events) {
      var Redis;
      this.clientOptions = clientOptions;
      this.Promise = Promise;
      this.Events = Events;
      Redis = eval("require")("ioredis"); // Obfuscated or else Webpack/Angular will try to inline the optional redis module
      this.client = new Redis(this.clientOptions);
      this.subClient = new Redis(this.clientOptions);
      this.pubsubs = {};
      this.loaded = false;
      this.ready = new this.Promise((resolve, reject) => {
        var count, done, errorListener;
        errorListener = e => {
          [this.client, this.subClient].forEach(client => {
            return client.removeListener("error", errorListener);
          });
          return reject(e);
        };
        count = 0;
        done = () => {
          count++;
          if (count === 2) {
            [this.client, this.subClient].forEach(client => {
              client.removeListener("error", errorListener);
              return client.on("error", e => {
                return this.Events.trigger("error", [e]);
              });
            });
            return resolve({
              client: this.client,
              subscriber: this.subClient
            });
          }
        };
        this.client.on("error", errorListener);
        this.client.on("ready", function () {
          return done();
        });
        this.subClient.on("error", errorListener);
        this.subClient.on("ready", () => {
          return this.subClient.psubscribe("bottleneck_*", function () {
            return done();
          });
        });
        return this.subClient.on("pmessage", (pattern, channel, message) => {
          var base;
          return typeof (base = this.pubsubs)[channel] === "function" ? base[channel](message) : void 0;
        });
      });
    }

    addLimiter(instance, pubsub) {
      return this.pubsubs[`bottleneck_${instance.id}`] = pubsub;
    }

    removeLimiter(instance) {
      return delete this.pubsubs[`bottleneck_${instance.id}`];
    }

    disconnect() {
      this.client.disconnect();
      return this.subClient.disconnect();
    }

  };

  module.exports = IORedisConnection;
}).call(undefined);