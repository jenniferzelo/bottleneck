// Generated by CoffeeScript 2.0.2
(function() {
  var Group, parser;

  parser = require("./parser");

  Group = (function() {
    class Group {
      constructor(limiterOptions = {}, groupOptions = {}) {
        this.key = this.key.bind(this);
        this.deleteKey = this.deleteKey.bind(this);
        this.limiters = this.limiters.bind(this);
        this.keys = this.keys.bind(this);
        this.startAutoCleanup = this.startAutoCleanup.bind(this);
        this.stopAutoCleanup = this.stopAutoCleanup.bind(this);
        this.updateSettings = this.updateSettings.bind(this);
        this.limiterOptions = limiterOptions;
        parser.load(groupOptions, this.defaults, this);
        this.instances = {};
        this.Bottleneck = require("./Bottleneck");
        this.startAutoCleanup();
      }

      key(key = "") {
        var ref;
        return (ref = this.instances[key]) != null ? ref : (this.instances[key] = new this.Bottleneck(this.limiterOptions));
      }

      deleteKey(key = "") {
        return delete this.instances[key];
      }

      limiters() {
        var k, ref, results, v;
        ref = this.instances;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push({
            key: k,
            limiter: v
          });
        }
        return results;
      }

      keys() {
        return Object.keys(this.instances);
      }

      startAutoCleanup() {
        var base;
        this.stopAutoCleanup();
        return typeof (base = (this.interval = setInterval(() => {
          var k, ref, results, time, v;
          time = Date.now();
          ref = this.instances;
          results = [];
          for (k in ref) {
            v = ref[k];
            if ((v._nextRequest + this.timeout) < time) {
              results.push(this.deleteKey(k));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }, this.timeout / 10))).unref === "function" ? base.unref() : void 0;
      }

      stopAutoCleanup() {
        return clearInterval(this.interval);
      }

      updateSettings(options = {}) {
        parser.overwrite(options, this.defaults, this);
        if (options.timeout != null) {
          return this.startAutoCleanup();
        }
      }

    };

    Group.prototype.defaults = {
      timeout: 1000 * 60 * 5
    };

    return Group;

  })();

  module.exports = Group;

}).call(this);
