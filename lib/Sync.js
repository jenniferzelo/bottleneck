// Generated by CoffeeScript 2.0.2
(function() {
  var DLList, Sync,
    slice = [].slice;

  DLList = require("./DLList");

  Sync = class Sync {
    constructor(name) {
      this.submit = this.submit.bind(this);
      this.schedule = this.schedule.bind(this);
      this.wrap = this.wrap.bind(this);
      this.name = name;
      this._running = 0;
      this._queue = new DLList();
    }

    _tryToRun() {
      var next;
      if ((this._running < 1) && this._queue.length > 0) {
        this._running++;
        next = this._queue.shift();
        return next.task.apply({}, next.args.concat((...args) => {
          var ref;
          this._running--;
          this._tryToRun();
          return (ref = next.cb) != null ? ref.apply({}, args) : void 0;
        }));
      }
    }

    submit(task, ...args) {
      var cb, i, ref;
      ref = args, args = 2 <= ref.length ? slice.call(ref, 0, i = ref.length - 1) : (i = 0, []), cb = ref[i++];
      this._queue.push({task, args, cb});
      return this._tryToRun();
    }

    schedule(task, ...args) {
      var wrapped;
      wrapped = function(...args) {
        var cb, i, ref;
        ref = args, args = 2 <= ref.length ? slice.call(ref, 0, i = ref.length - 1) : (i = 0, []), cb = ref[i++];
        return (task.apply({}, args)).then(function(...args) {
          return cb.apply({}, Array.prototype.concat(null, args));
        }).catch(function(...args) {
          return cb.apply({}, args);
        });
      };
      return new Promise((resolve, reject) => {
        return this.submit.apply({}, Array.prototype.concat(wrapped, args, function(...args) {
          return (args[0] != null ? reject : (args.shift(), resolve)).apply({}, args);
        }));
      });
    }

    wrap(fn) {
      return (...args) => {
        return this.schedule.apply({}, Array.prototype.concat(fn, args));
      };
    }

  };

  module.exports = Sync;

}).call(this);
